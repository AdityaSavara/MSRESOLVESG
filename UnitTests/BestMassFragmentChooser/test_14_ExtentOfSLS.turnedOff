"""
Created on Wed Aug  1 13:47:18 2018

@author: Andrea
"""

#THE FOLLOWING LINES ARE MANDATORY FOR THE CODE
#importing the functions from UnitTesterSG module
import sys
import os
baseDir = os.getcwd()
sys.path.insert(1, os.path.join(baseDir, os.pardir, "lib"))
sys.path.insert(1, os.path.join(baseDir, os.pardir))
sys.path.insert(1, os.path.join(baseDir, os.pardir, os.pardir))
import UnitTesterSG as ut

#BELOW ARE THE LINES INTENDED TO BE CHANGED BY THE USER	
#1) import the function whose results need to be checked
import bestMassFragChooser as bmfc

#Import the UserInput to turnoff the SLSUniqueExport option. This will be the same module as the one bmfc is using, so it will turn off there also.
import UserInput as G
G.SLSUniqueExport == 'no'

#2) getting the prefix (or suffix) arugument for check_results. This is just for the output filenames.
suffix= ut.returnDigitFromFilename(__file__)
prefix=''

#3) provide the input for the function you want to test (you can also import it from a pickled object, for example)
#Declare variables to be used. These will be included in the UserInput file
#once fully integrated into MSRESOLVE
#Select the molecules to be monitored
moleculesToMonitor=['Ethylene (Ethene)', 'Ethanol', 'Crotyl Alcohol' , 'Acetaldehyde' ]
#Enter the likelihood for each molecule in the order shown above.
#**IDEA could the user input directly into a dictionary initialization?
moleculesLikelihood=[1,0.5,1,1]
#Enter the number of mass fragements to monitor
numberOfMassFragsToMonitor=6

#4) get the output of the function, which is what will typically be checked.

topBestMassFragments= bmfc.bestMassFragChooser(moleculesToMonitor, moleculesLikelihood, numberOfMassFragsToMonitor,'AcetaldehydeNISTRefMixed2.tsv','xyyy', onTheFlySLS=True, useExtentOfSLSUniqueSolvable = True )[0] #, output[1], output[2]]  #You can alternatively populate resultObj with whatever you want, such as a list.
resultObj=topBestMassFragments

#5) A string is also typically provided, but is an optional argument. You can provide whatever string you want.
resultStr= str(resultObj)
#6) Checking the result of the function using check_results. In this case the result is sumList1 object. 

#this is so that pytest can do UnitTesterSG tests.
def test_pytest(): #note that it cannot have any required arguments for pytest to use it, and that it is using variables that are defined above in the module.
    ut.doTest(resultObj, resultStr, prefix=prefix,suffix=suffix, allowOverwrite = False)
    
    
if __name__ == "__main__":
   #This is the normal way of using the UnitTesterSG module, and will be run by UnitTesterSG or by running this test file by itself.
   ut.doTest(resultObj, resultStr, prefix=prefix,suffix=suffix, allowOverwrite = True)
